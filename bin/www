#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('digitalproject:server');
var http = require('http');
var event = require('events');
var emitter = new event.EventEmitter();
var dashboardModel = require('../model/dashboard-data');
var planningModel = require('../model/planning-data');
var oeeModel = require('../model/oee-data');
var async = require('async');
var s7node = require('../model/s7_module');
var fs = require('fs');
var excel = require('../model/excel');

var moment = require('moment');
var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost:27017/SimulationDB3', { useNewUrlParser: true });

var $testAndPackingAssetId, $punchingAssetId, $token;
var $currentTestAndPacking = { data: { productCounter: 0, cabinetTemp: 30, cabinetHumidity: 70 }, timestamp: null };
var $currentPunching = { data: { productCounter: 0, cabinetTemp: 30, cabinetHumidity: 70, oilPressure: 0, oilTemp: 31, oilLevel: 0 }, timestamp: null };
var $fixedPrepareTime = 0.5;

let $tepa_plc_object = {
  name : "TestAndPacking",
  address : "192.168.1.21",
  port : 102,
  rack : 0,
  slot : 1,
  s7_node : {}
};

let $punch_plc_object = {
  name : "Punching",
  address : "192.168.1.20",
  port : 102,
  rack : 0,
  slot : 1,
  s7_node : {}
};

let tepa_variable_list = {
  cabinet_temp : 'DB105.DBD0',
  cabinet_humidity : 'DB105.DBD4',
  product_counter : 'DB105.DBD8',
  fail_product : 'DB105.DBD12',
  run_time : 'DB105.DBD16',
  prepare_time : 'DB105.DBD20',
  maintenance_time : 'DB105.DBD24',
  repair_time : 'DB105.DBD28',
  lower_speed : 'DB105.DBD32',
  setup_time : 'DB105.DBD36',
  circle_counter : 'DB105.DBD40'
};

let punch_variable_list = {
  cabinet_temp : 'DB105.DBD0',
  cabinet_humidity : 'DB105.DBD4',
  oil_pressure : 'DB105.DBD8',
  oil_temp : 'DB105.DBD12',
  oil_level : 'DB105.DBX16.0',
  product_counter : 'DB105.DBD18',
  fail_product : 'DB105.DBD22',
  run_time : 'DB105.DBD26',
  prepare_time : 'DB105.DBD30',
  maintenance_time : 'DB105.DBD34',
  repair_time : 'DB105.DBD38',
  lower_speed : 'DB105.DBD42',
  setup_time : 'DB105.DBD46',
  circle_counter : 'DB105.DBD50'
};

let tepa_variable_keys = ['CabinetTemp', 'CabinetHumidity', 'ProductCounter'];
let punch_variable_keys = ['CabinetTemp', 'CabinetHumidity', 'OilPressure', 'OilTemp', 'OilLevel', 'ProductCounter']; 
let oee_data_keys = ['ProductCounter', 'FailProduct', 'Runtime', 'PrepareTime', 'MaintenanceTime', 'RepairTime', 'LowerSpeed', 'SetupTime', 'CircleCounter'];

let tepa_oee = {};
let punch_oee = {};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

//------------------------ CONNECT TO SIEMENS PLC AND READ DATA -----------------------------------------

async.series([
  //Connect to PLC and init reading list
  function (callback) {
    s7node.initConnection ($tepa_plc_object.name, $tepa_plc_object.address, $tepa_plc_object.port, $tepa_plc_object.rack, $tepa_plc_object.slot, function(plc_result) {
      if (plc_result)
      {
        var arr_variable = Object.values (tepa_variable_list);

        console.log('Connected to PLC ' + $tepa_plc_object.address);
        $tepa_plc_object.s7_node = plc_result.s7Node;

        arr_variable[0] = s7node.modifyAddress (arr_variable[0], 'Double');
        arr_variable[1] = s7node.modifyAddress (arr_variable[1], 'Double');
        arr_variable[2] = s7node.modifyAddress (arr_variable[2], 'uDInt');
        arr_variable[3] = s7node.modifyAddress (arr_variable[3], 'uDInt');
        arr_variable[4] = s7node.modifyAddress (arr_variable[4], 'uDInt');
        arr_variable[5] = s7node.modifyAddress (arr_variable[5], 'uDInt');
        arr_variable[6] = s7node.modifyAddress (arr_variable[6], 'uDInt');
        arr_variable[7] = s7node.modifyAddress (arr_variable[7], 'uDInt');
        arr_variable[8] = s7node.modifyAddress (arr_variable[8], 'uDInt');
        arr_variable[9] = s7node.modifyAddress (arr_variable[9], 'uDInt');
        arr_variable[10] = s7node.modifyAddress (arr_variable[10], 'uDInt');

        s7node.initReadingList ($tepa_plc_object.s7_node, arr_variable);
        callback();
      }
    });
  },
 
  function (callback) {
    s7node.initConnection ($punch_plc_object.name, $punch_plc_object.address, $punch_plc_object.port, $punch_plc_object.rack, $punch_plc_object.slot, function(plc_result) {
      if (plc_result)
        {
          var arr_variable = Object.values (punch_variable_list);

          console.log('Connected to PLC ' + $punch_plc_object.address);
          $punch_plc_object.s7_node = plc_result.s7Node;

          arr_variable[0] = s7node.modifyAddress (arr_variable[0], 'Double');
          arr_variable[1] = s7node.modifyAddress (arr_variable[1], 'Double');
          arr_variable[2] = s7node.modifyAddress (arr_variable[2], 'Double');
          arr_variable[3] = s7node.modifyAddress (arr_variable[3], 'Double');
          arr_variable[4] = s7node.modifyAddress (arr_variable[4], 'Bool');
          arr_variable[5] = s7node.modifyAddress (arr_variable[5], 'uDInt');
          arr_variable[6] = s7node.modifyAddress (arr_variable[6], 'uDInt');
          arr_variable[7] = s7node.modifyAddress (arr_variable[7], 'uDInt');
          arr_variable[8] = s7node.modifyAddress (arr_variable[8], 'uDInt');
          arr_variable[9] = s7node.modifyAddress (arr_variable[9], 'uDInt');
          arr_variable[10] = s7node.modifyAddress (arr_variable[10], 'uDInt');
          arr_variable[11] = s7node.modifyAddress (arr_variable[11], 'uDInt');
          arr_variable[12] = s7node.modifyAddress (arr_variable[12], 'uDInt');
          arr_variable[13] = s7node.modifyAddress (arr_variable[13], 'uDInt');
          s7node.initReadingList ($punch_plc_object.s7_node, arr_variable);
          callback();
        }
     });
  },
  function (callback) {
    console.log('Start getting and writing data');
    getAndWriteData();
    //updateOEE();
    callback();
  }
], function (err, result) {
  if (err) console.log(err);
});

//------------------------ SET INTERVAL -----------------------------------------

//Get dashboard data each 10 min
var dashboardSamplePeriod = 5; //Get data each 10 mins
setInterval(function () {
  getAndWriteData();
}, dashboardSamplePeriod * 60 * 1000);

//Read OEE data and write to mongo database at 22:00 everyday
var now = moment().format('YYYY-MM-DD HH:mm:ss');
//var triggerTime = moment('23:00', 'HH:mm');
//if (triggerTime < moment(now)) triggerTime = moment('23:00', 'HH:mm').add(1, 'days'); //If it passes 22:30, this will be triggered next day
var triggerTime = moment('22:30', 'HH:mm');
if (triggerTime < moment(now)) triggerTime = moment('22:30', 'HH:mm').add(1, 'days'); //If it passes 22:30, this will be triggered next day
var remainPeriod = triggerTime - moment(now);

setTimeout(function () {
  async.series([
    function(callback) {
      console.log('Update OEE');
      updateOEE();
      callback();
    },
    function (callback) {
      console.log('Write data to excel');
      write_data_to_excel('testAndPacking', 'month');
      callback();
    },
    function(callback) {
      write_data_to_excel('punching', 'month');
      callback();
    }
  ], function(err) {
    if (err) console.log(err);
  })
  setInterval(function () {
    async.series([
      function(callback) {
        console.log('Update OEE');
        updateOEE();
        callback();
      },
      function (callback) {
        console.log('Write data to excel');
        write_data_to_excel('testAndPacking', 'month');
        callback();
      },
      function(callback) {
        write_data_to_excel('punching', 'month');
        callback();
      }
    ], function(err) {
      if (err) console.log(err);
    })
    //$currentTestAndPacking.data = {productCounter : 0, cabinetTemp : 0, cabinetHumidity : 0};
    //$currentPunching.data = {productCounter : 0, cabinetTemp : 0, cabinetHumidity : 0, oilPressure : 0, oilTemp : 0, oilLevel : 0};
  }, 86400000); //Update OEE next day
}, remainPeriod);



io.on('connection', function (socket) {

  //------------------------ SOCKET DASHBOARD -----------------------------------------
  socket.on('/reqDashboard', function (cmd) {
    //Product
    var currentProduct = {
      testAndPackingAsset: $currentTestAndPacking.data.productCounter,
      punchingAsset: $currentPunching.data.productCounter
    }
    socket.emit('/resDashboard', currentProduct, 'product');

    async.series([
      function (callback) {
        //Today
        dashboardModel.getTodayData(dashboardModel.testAndPackingAssetModel, dashboardModel.punchingAssetModel, function (data) {
          socket.emit('/resDashboard', data, 'today');
          callback();
        })
      },
      function (callback) {
        //Current week
        dashboardModel.getWeekData(dashboardModel.testAndPackingAssetModel, dashboardModel.punchingAssetModel, function (data) {
          socket.emit('/resDashboard', data, 'week');
          callback();
        });
      },
      function (callback) {
        //Current month
        dashboardModel.getMonthData(dashboardModel.testAndPackingAssetModel, dashboardModel.punchingAssetModel, function (data) {
          socket.emit('/resDashboard', data, 'month');
          callback();
        });
      },
      function (callback) {
        //Current quarter
        dashboardModel.getQuarterData(dashboardModel.testAndPackingAssetModel, dashboardModel.punchingAssetModel, function (data) {
          socket.emit('/resDashboard', data, 'quarter');
          callback();
        });
      },
      function (callback) {
        //Current year
        dashboardModel.getYearData(dashboardModel.testAndPackingAssetModel, dashboardModel.punchingAssetModel, function (data) {
          socket.emit('/resDashboard', data, 'year');
          callback();
        });
      }
    ])
  });

  emitter.on('/realtime', function (receiveData) {
    socket.emit('/dashboard/realtime', receiveData);
  });



  //------------------------ SOCKET PLANNING -------------------------------------------
  socket.on('/newPlanning', function (data) {
    var mongooseModel;
    if (data.asset == 'testAndPackingAsset') mongooseModel = planningModel.tePaPlanningModel;
    else mongooseModel = planningModel.punchingPlanningModel;

    var weekIndex = 0;

    async.whilst(
      //Check condition
      function () {
        return weekIndex < data.week.length;
      },
      //Task 
      function (callback) {
        mongooseModel.findOne({ 'week': data.week[weekIndex], 'interval': data.interval }, function (err, found) {
          if (found) { //Found week, check and update data
            for (var item in data.mode) {
              for (var i = 0; i < data.mode[item].length; i++) {
                planningModel.checkExistingItem(mongooseModel, {
                  week: data.week[weekIndex],
                  date: moment(data.week[weekIndex]).isoWeekday(data.mode[item][i].date).format('YYYY-MM-DD'),
                  startTime: data.mode[item][i].startTime,
                  stopTime: data.mode[item][i].stopTime,
                  mode: data.mode[item][i].mode
                }, function (result, _mode) {
                  if (result) {
                    result.mode = _mode;
                    result.save();
                  }
                });
              }
            }
            weekIndex = weekIndex + 1;
            callback();
          } else {
            planningModel.createNewPlan(data, data.week[weekIndex]);
            weekIndex = weekIndex + 1;
            callback();
          }
        });
      }
    )

  });

  socket.on('/reqPlanning', function (reqData) {
    console.log(reqData);
    var mongooseModel;
    if (reqData.asset == 'testAndPackingAsset') mongooseModel = planningModel.tePaPlanningModel;
    else mongooseModel = planningModel.punchingPlanningModel;
    planningModel.getPlanData(reqData.week, mongooseModel, reqData.asset, function (data) {
      socket.emit('/resPlanning', data);
    })
  })

  //------------------------ SOCKET OEE -------------------------------------------
socket.on('/reqOee', function (data) {
    oeeModel.getData(oeeModel.tePaModel, oeeModel.punchingModel, function (result) {
      oeeModel.tePaModel.findOne({ date: moment().format('YYYY-MM-DD'), type: 'day' }, function (err, dayResult) {
        if (err) console.log(err);
        else if (!dayResult) {
          console.log('Cannot find date')
          async.parallel([
            function (callback) {
              calculateCurrentOEE(tepa_oee, 'testAndPackingAsset', function (oeeObj) {
                result.testAndPackingAsset.today = oeeObj;
                callback();
              });
            },
            function (callback) {
              calculateCurrentOEE(punch_oee, 'punchingAsset', function (oeeObj) {
                result.punchingAsset.today = oeeObj;
                callback();
              });
            }
          ], function (err) {
            socket.emit('/resOee', result);
          })
        } else socket.emit('/resOee', result);
      })
    });
  });
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//------------------------ FUNCTIONS -------------------------------------------
function updateOEE() {
  async.series([
    function (callback) {
      oeeModel.todayOEE(tepa_oee, 'testAndPackingAsset');
      callback();
    },
  ], function (err, result) {
    if (err) console.log(err);
    else {
      oeeModel.longPeriodOEE(oeeModel.tePaOeeParamModel, 'testAndPackingAsset', 'week');
      oeeModel.longPeriodOEE(oeeModel.tePaOeeParamModel, 'testAndPackingAsset', 'month');
      oeeModel.longPeriodOEE(oeeModel.tePaOeeParamModel, 'testAndPackingAsset', 'quarter');
      oeeModel.longPeriodOEE(oeeModel.tePaOeeParamModel, 'testAndPackingAsset', 'year');
    }
  })

  async.series([
    function (callback) {
      oeeModel.todayOEE(punch_oee, 'punchingAsset');
      callback();
    },
  ], function (err, result) {
    if (err) console.log(err);
    else {
      oeeModel.longPeriodOEE(oeeModel.punchingOeeParamModel, 'punchingAsset', 'week');
      oeeModel.longPeriodOEE(oeeModel.punchingOeeParamModel, 'punchingAsset', 'month');
      oeeModel.longPeriodOEE(oeeModel.punchingOeeParamModel, 'punchingAsset', 'quarter');
      oeeModel.longPeriodOEE(oeeModel.punchingOeeParamModel, 'punchingAsset', 'year');
    }
  })
}

//Only apply for today OEE data
function calculateCurrentOEE(mindsphereData, assetName, callback) {
  console.log('Mindsphere data');
  console.log(mindsphereData);

  var mongooseModel;
  if (assetName == 'testAndPackingAsset') mongooseModel = planningModel.tePaPlanningModel;
  else mongooseModel = planningModel.punchingPlanningModel;

  planningModel.getPlanningPeriod('day', mongooseModel, assetName, function (planningObject) {
    console.log('Planning object');
    console.log(planningObject);
    var plannedWorkingTime = planningObject.data.workTime;
    var productiveTime = mindsphereData.Runtime + mindsphereData.CircleCounter * $fixedPrepareTime;
    var goodProduct = mindsphereData.ProductCounter - mindsphereData.FailProduct;
    var totalProduct = mindsphereData.ProductCounter;
    var realRunningTime = productiveTime + mindsphereData.PrepareTime + mindsphereData.MaintenanceTime + mindsphereData.RepairTime;

    var oeeObject = oeeModel.calculateOEE({
      plannedWorkingTime: plannedWorkingTime,
      productiveTime: productiveTime,
      goodProduct: goodProduct,
      totalProduct: totalProduct,
      realRunningTime: realRunningTime
    });

    console.log("OEE value");
    console.log(oeeObject);

    callback({
      oee: [{ date: moment().format('YYYY-MM-DD'), value: oeeObject.oee }],
      availability: [{ date: moment().format('YYYY-MM-DD'), value: oeeObject.availability }],
      performance: [{ date: moment().format('YYYY-MM-DD'), value: oeeObject.performance }],
      quality: [{ date: moment().format('YYYY-MM-DD'), value: oeeObject.quality }],
    })
  });
}

//Read values from PLC and format to object TestAndPacking  = {data : {'ProductCounter' : 200 ...}, timestamp : _time}
function getAndWriteData()
{
  var timestamp = moment().format('YYYY-MM-DD HH:mm:ss');
  s7node.readAllData ($tepa_plc_object.s7_node, function (result) {
    if (result)
    {
      var tepa_result_object = {};
      var tepa_oee_object = {};
      var array_values = Object.values (result);

      for (var i = 0; i < tepa_variable_keys.length; i++)
      {
        tepa_result_object[tepa_variable_keys[i]] = array_values[i];
      }
      for (var i = 0; i < oee_data_keys.length; i++)
      {
        tepa_oee_object[oee_data_keys[i]] = array_values[i + tepa_variable_keys.length - 1];
      }
      tepa_oee = tepa_oee_object;
      console.log (tepa_result_object);
      console.log (tepa_oee);

      if ((tepa_result_object.ProductCounter != $currentTestAndPacking.data.productCounter) || (tepa_result_object.CabinetTemp != $currentTestAndPacking.data.cabinetTemp) || (tepa_result_object.CabinetHumidity != $currentTestAndPacking.data.cabinetHumidity)) {
        $currentTestAndPacking.data.productCounter = tepa_result_object.ProductCounter;
        $currentTestAndPacking.data.cabinetTemp = tepa_result_object.CabinetTemp; 
        $currentTestAndPacking.data.cabinetHumidity = tepa_result_object.CabinetHumidity;
        $currentTestAndPacking.timestamp = timestamp;

        var newModel1 = new dashboardModel.testAndPackingAssetModel({
          name: 'cabinetTemp',
          value: $currentTestAndPacking.data.cabinetTemp,
          unit: 'oC',
          timestamp: timestamp            
        });
        dashboardModel.createNewData(newModel1);

        var newModel2 = new dashboardModel.testAndPackingAssetModel({
          name: 'cabinetHumidity',
          value: $currentTestAndPacking.data.cabinetHumidity,
          unit: '%',
          timestamp: timestamp 
        });
        dashboardModel.createNewData(newModel2);

        var newModel3 = new dashboardModel.testAndPackingAssetModel({
          name: 'productCounter',
          value: $currentTestAndPacking.data.productCounter,
          unit: 'product',
          timestamp: timestamp 
        });
        dashboardModel.createNewData(newModel3);
        emitter.emit('/realtime', { asset: 'testAndPackingAsset', date: timestamp, value: tepa_result_object })
      }
    }
  })

  s7node.readAllData ($punch_plc_object.s7_node, function (result) {
    if (result)
    {
      var punch_result_object = {};
      var punch_oee_object = {};
      var array_values = Object.values (result);

      for (var i = 0; i < punch_variable_keys.length; i++)
      {
        punch_result_object[punch_variable_keys[i]] = array_values[i];
      }
      for (var i = 0; i < oee_data_keys.length; i++)
      {
        punch_oee_object[oee_data_keys[i]] = array_values[i + punch_variable_keys.length - 1];
      }
      punch_oee = punch_oee_object;
      console.log (punch_result_object);
      console.log (punch_oee);

      if ((punch_result_object.ProductCounter != $currentPunching.data.productCounter) || (punch_result_object.CabinetTemp != $currentPunching.data.cabinetTemp) || (punch_result_object.CabinetHumidity != $currentPunching.data.cabinetHumidity) || (punch_result_object.OilPressure != $currentPunching.data.oilPressure) || (punch_result_object.OilTemp != $currentPunching.data.oilTemp) || (punch_result_object.OilLevel != $currentPunching.data.oilLevel)) {

        $currentPunching.data.productCounter = punch_result_object.ProductCounter;
        $currentPunching.data.cabinetTemp = punch_result_object.CabinetTemp;
        $currentPunching.data.cabinetHumidity = punch_result_object.CabinetHumidity;
        $currentPunching.data.oilPressure = punch_result_object.OilPressure;
        $currentPunching.data.oilTemp = punch_result_object.OilTemp;
        $currentPunching.data.oilLevel = punch_result_object.OilLevel;
        $currentPunching.timestamp = timestamp;

        var newModel1 = new dashboardModel.punchingAssetModel({
          name: 'cabinetTemp',
          value: $currentPunching.data.cabinetTemp,
          unit: 'oC',
          timestamp: timestamp 
        });
        dashboardModel.createNewData(newModel1);

        var newModel2 = new dashboardModel.punchingAssetModel({
          name: 'cabinetHumidity',
          value: $currentPunching.data.cabinetHumidity,
          unit: '%',
          timestamp: timestamp 
        });
        dashboardModel.createNewData(newModel2);

        var newModel3 = new dashboardModel.punchingAssetModel({
          name: 'oilPressure',
          value: $currentPunching.data.oilPressure,
          unit: 'BAR',
          timestamp: timestamp 
        });
        dashboardModel.createNewData(newModel3);

        var newModel4 = new dashboardModel.punchingAssetModel({
          name: 'oilTemp',
          value: $currentPunching.data.oilTemp,
          unit: 'oC',
          timestamp: timestamp 
        });
        dashboardModel.createNewData(newModel4);

        var newModel5 = new dashboardModel.punchingAssetModel({
          name: 'oilLevel',
          value: $currentPunching.data.oilLevel,
          unit: 'HI_LO',
          timestamp: timestamp 
        });
        dashboardModel.createNewData(newModel5);

        var newModel6 = new dashboardModel.punchingAssetModel({
          name: 'productCounter',
          value: $currentPunching.data.productCounter,
          unit: 'product',
          timestamp: timestamp 
        });
        dashboardModel.createNewData(newModel6);

        emitter.emit('/realtime', { asset: 'punchingAsset', date: timestamp, value: punch_result_object })
      }
    }
  })
}

//Write oee data to excel
function write_data_to_excel (asset, mode)
{
  var startDate, endDate;
  var sampleFile = './excel/SampleFormat.xlsx';
  var destFile = './excel/Report.xlsx';
  var sampleFileWithMacro = './excel/SampleFormat.xlsm';
  var destFileWithMacro = './excel/Report.xlsm';
  let destination = 'D:/OEE_Report/';
  var report_title;
  
  switch(mode) {
    case 'week' : {
      startDate = moment().startOf('isoWeek').format('YYYY-MM-DD');
      endDate = moment().endOf('isoWeek').format('YYYY-MM-DD');
      break;
    };
    case 'month' : {
      startDate = moment().startOf('month').format('YYYY-MM-DD');
      endDate = moment().endOf('month').format('YYYY-MM-DD');
      break;
    };
    case 'quarter' : {
      startDate = moment().startOf('quarter').format('YYYY-MM-DD');
      endDate = moment().endOf('quarter').format('YYYY-MM-DD');
      break;
    };
    case 'year' : {
      startDate = moment().startOf('year').format('YYYY-MM-DD');
      endDate = moment().endOf('year').format('YYYY-MM-DD');
      break;
    };
  }
  report_title = destination + moment().format('YYYY_MM_DD_') + asset + '_report.xlsm';

  if (asset == 'punching') {
    oeeModel.punchingOeeParamModel.find({date : {$gte : startDate, $lte : endDate}} , function(err, result) {
      if(err) console.log(err);
      else {
        var title = excel.generateTitle(mode , 'punchingAsset');
        excel.createReport(sampleFile, destFile, title , result, function(status) {
          if (status) {
            excel.modifyReport(destFile, sampleFileWithMacro, destFileWithMacro, function(result) {
              if (result) fs.rename(destFileWithMacro, report_title, function() {});
            });

            // async.series([
            //   function(callback) {
            //     var wbReport = excelMacro.readFile(destFile);
            //     var wbMacro = excelMacro.readFile(sampleFileWithMacro , {bookVBA : true});
            //     wbMacro.Sheets["Sheet1"] = wbReport.Sheets["Sheet1"];
            //     excelMacro.writeFile(wbMacro, destFileWithMacro, {bookVBA : true});
            //     callback();
            //   },
            //   function(callback) {
            //     res.download(destFileWithMacro);
            //     callback();
            //   }
            // ])
          }
        });
      }
    });
  } else {  //Test and packing
    oeeModel.tePaOeeParamModel.find({date : {$gte : startDate, $lte : endDate}} , function(err, result) {
      if (err) console.log(err);
      else {
        var title = excel.generateTitle(mode, 'testAndPackingAsset');
        excel.createReport(sampleFile, destFile, title, result, function(status) {
          if (status) {
            excel.modifyReport(destFile, sampleFileWithMacro, destFileWithMacro, function(result) {
              if (result) fs.rename(destFileWithMacro, report_title, function() {});
            });
            // async.series([
            //   function(callback) {
            //     var wbReport = excelMacro.readFile(destFile);
            //     var wbMacro = excelMacro.readFile(sampleFileWithMacro , {bookVBA : true});
            //     wbMacro.Sheets["Sheet1"] = wbReport.Sheets["Sheet1"];
            //     excelMacro.writeFile(wbMacro, destFileWithMacro, {bookVBA : true});
            //     callback();
            //   },
            //   function(callback) {
            //     res.download(destFileWithMacro);
            //     callback();
            //   }
            // ])
          }
        })
      }
    });
  }
}
